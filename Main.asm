;LED灯定义
LED1 BIT P2.4           ;将P3.4用伪命令命名为LED1
LED2 BIT P2.5           ;将P3.5用伪命令命名为LED2
LED3 BIT P2.6
LED4 BIT P2.7

;蜂鸣器定义
BEEP BIT P1.0

;按键定义
KEY1  BIT  P3.2
KEY2  BIT  P3.4

;数码管引脚定义
SM_G1 BIT P2.0
SM_G2 BIT P2.1
SM_G3 BIT P2.2
SM_G4 BIT P2.3

SM_A  BIT P0.7
SM_B  BIT P0.6
SM_C  BIT P0.5
SM_D  BIT P0.4
SM_E  BIT P0.3
SM_F  BIT P0.2
SM_G  BIT P0.1
SM_DP BIT P0.0

;数码管表
SM_CODE0 EQU 03H
SM_CODE1 EQU 9FH
SM_CODE2 EQU 25H
SM_CODE3 EQU 0DH
SM_CODE4 EQU 99H
SM_CODE5 EQU 49H
SM_CODE6 EQU 41H
SM_CODE7 EQU 1FH
SM_CODE8 EQU 01H
SM_CODE9 EQU 09H

;数码管要显示的内容
DATA_TO_SHOW     DATA 3EH
TIME_CNT         DATA 3FH

;存放ADC转换结果
s_iADCBuf DATA 3FH

;特殊寄存器定义
sfr  AUXR      = 0x8E
sfr  BRT       = 0x9C
sfr  P1ASF     = 0x9D
sfr  ADC_CONTR = 0xBC
sfr  ADC_RES   = 0xBD
sfr  AUXR1     = 0xA2
sbit EADC      = IE.5

;延时变量
s_iDelayTime DATA 30H

;UART队列内存
QUEUE_SIZE       EQU  0AH  ;队列大小，暂未10个
QUEUE_DATA_START EQU  34H  ;数据0地址
s_iQueue_Front   DATA 31H  ;头指针，队非空时指向队头元素
s_iQueue_Rear    DATA 32H  ;尾指针，队非空时指向队尾元素的下一个位置
s_iQueue_Num     DATA 33H  ;当前容量，0-QUEUE_SIZE，表示当前队列中含有多少元素
s_iQueue_Data0   DATA 34H  ;数据0
s_iQueue_Data1   DATA 35H  ;数据1
s_iQueue_Data2   DATA 36H  ;数据2
s_iQueue_Data3   DATA 37H  ;数据3
s_iQueue_Data4   DATA 38H  ;数据4
s_iQueue_Data5   DATA 39H  ;数据5
s_iQueue_Data6   DATA 3AH  ;数据6
s_iQueue_Data7   DATA 3BH  ;数据7
s_iQueue_Data8   DATA 3CH  ;数据8
s_iQueue_Data9   DATA 3DH  ;数据9

ORG   0000H
LJMP  MAIN    ;跳转至主函数

ORG   0003H
LJMP  INT_X0  ;外部中断0入口

ORG   000BH
LJMP  INT_T0  ;定时器0中断入口

ORG   0013H
LJMP  INT_X1  ;外部中断1入口

ORG   001BH
LJMP  INT_T1  ;定时器1中断入口

ORG   002BH
LJMP  ADC_ISR ;ADC中断入口

ORG   0023H
LJMP  INT_S   ;串行通信中断入口

;/*********************************************************************************************************
;* 函数名称: MAIN
;* 函数功能: 主函数
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/    
ORG   0100H
MAIN: 
    MOV   SP,#70H     ;设置堆栈指针
    ;LCALL TIMER0INIT  ;初始化定时器0
    ;LCALL UARTINIT    ;初始化串口
    ;LCALL INIT_DELAY  ;初始化延时模块
    ;LCALL INIT_INT_X0 ;初始化外部中断
    LCALL INIT_ADC    ;初始化ADC
    SETB  EA          ;打开总中断
    CLR   LED1
    CLR   LED2
    CLR   LED3
    CLR   LED4
LOOP:
    ;CPL   LED1

    ;UART测试
    ;MOV   R0,#0x02
    ;LCALL DELAY_NMS
    
    ;LCALL READ_UART   ;从UART中读取数据
    ;MOV   A,R0
    ;JZ    LOOP         ;R0为0（即失败），则重新循环
    ;MOV   A,R1         ;将读到的数据存入累加器
    ;MOV   R0,A         ;将读到的数据存入R0
    ;LCALL WRITE_UART   ;调用UART发送函数

    ;数码管测试
    LCALL SM_SHOW_DATA_FUC

    LJMP  LOOP
    RET

;/*********************************************************************************************************
;* 函数名称: INIT_ADC
;* 函数功能: 初始化ADC1
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/  
INIT_ADC:
   MOV  P1ASF,#02H      ;P1.1作为模拟功能A/D使用
   MOV  ADC_RES,#0x00   ;清空ADC_RES
   ANL  AUXR1,#0xFB     ;ADRJ为0
   MOV  ADC_CONTR,#0xE9 ;使能ADC
   SETB EADC            ;使能ADC中断
   RET 

;/*********************************************************************************************************
;* 函数名称: ADC_ISR
;* 函数功能: ADC转换完成中断服务函数
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/  
ADC_ISR:
   MOV   ADC_CONTR,#0xE9        ;清空ADC_FLAG
   MOV   s_iADCBuf,ADC_RES      ;保存转换数据
   MOV   DATA_TO_SHOW,s_iADCBuf ;数码管显示电压
   RETI

;/*********************************************************************************************************
;* 函数名称: INIT_INT_X0
;* 函数功能: 初始化外部中断0
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/  
INIT_INT_X0:
    SETB  IT0       ;下降沿触发
    ;CLR   IT0       ;低电平触发
    ;SETB  PX0       ;高优先级
    CLR   PX0       ;低优先级
    SETB  EX0       ;打开外部中断
    RET

;/*********************************************************************************************************
;* 函数名称: INT_X0
;* 函数功能: 外部中断0入口
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/  
INT_X0:
      CPL   LED1
      RETI

;/*********************************************************************************************************
;* 函数名称: TIMER0INIT
;* 函数功能: 初始化定时器0
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
TIMER0INIT:         ;1毫秒@11.0592MHz
    ORL  AUXR,#80H  ;定时器时钟1T模式
    ANL  TMOD,#0F0H ;设置定时器模式
    ORL  TMOD,#01H  ;设置定时器模式
    MOV  TL0,#0CDH  ;设置定时初值
    MOV  TH0,#0D4H  ;设置定时初值
    CLR  TF0        ;清除TF0标志
    SETB TR0        ;定时器0开始计时
    SETB ET0        ;打开定时器0中断
    RET

;/*********************************************************************************************************
;* 函数名称: INT_T0
;* 函数功能: 定时器0中断入口
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/  
INT_T0:
    MOV   TL0,#0CDH
    MOV   TH0,#0D4H
    LCALL DELAY_TIME_PROC ;延时定时器中断处理
    RETI

;/*********************************************************************************************************
;* 函数名称: INT_X1
;* 函数功能: 外部中断1入口
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
INT_X1:
      RETI

;/*********************************************************************************************************
;* 函数名称: INT_T1
;* 函数功能: 定时器1中断入口
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
INT_T1:
      RETI

;/*********************************************************************************************************
;* 函数名称: UARTINIT
;* 函数功能: 初始化UART
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
UARTINIT:             ;115200bps@11.0592MHz
    LCALL INIT_QUEUE  ;初始化队列

    ORL PCON,#80H     ;使能波特率倍速位SMOD
    MOV SCON,#50H     ;8位数据,可变波特率
    ORL AUXR,#04H     ;独立波特率发生器时钟为Fosc,即1T
    MOV BRT,#0FAH     ;设定独立波特率发生器重装值
    ORL AUXR,#01H     ;串口1选择独立波特率发生器为波特率发生器
    ORL AUXR,#10H     ;启动独立波特率发生器
    SETB PS           ;提高串口优先级
    SETB ES           ;打开串口中断

    RET

;/*********************************************************************************************************
;* 函数名称: INT_S
;* 函数功能: 串行通信中断入口
;* 输入参数: void
;* 输出参数: R0-储存UART数据至队列
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
INT_S:
      JNB  RI,UART_RET    ;为0时直接退出
      CLR  RI             ;清空RI
      PUSH 00H            ;R0压入栈，起到保护作用
      MOV  R0,SBUF        ;接收数据
      LCALL EN_QUEUE      ;将数据写入队列
      POP  00H            ;恢复R0
      RETI                ;退出
UART_RET:
      RETI                ;退出

;/*********************************************************************************************************
;* 函数名称: READ_UART
;* 函数功能: 从UART中读出数据
;* 输入参数: void
;* 输出参数: R0：1-成功，0-失败，R1：读取到的数据
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
READ_UART:
      LCALL DE_QUEUE   ;从队列中读取数据
      RET

;/*********************************************************************************************************
;* 函数名称: WRITE_UART
;* 函数功能: 向UART写入数据
;* 输入参数: void
;* 输出参数: R0：需要发送的数据
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
WRITE_UART:
      MOV SBUF,R0             ;将R0中的数据加载至SBUF，UART会自动将数据发送出去
WRITE_UART_LOOP:
      JNB TI,WRITE_UART_LOOP  ;TI为0（发送未完成）则继续等待
      CLR TI                  ;清除发送完成标志
      RET                     ;结束

;/*********************************************************************************************************
;* 函数名称: INIT_QUEUE
;* 函数功能: 初始化队列
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 该队列由UART专用
;*********************************************************************************************************/
INIT_QUEUE:
    MOV s_iQueue_Front,#00H
    MOV s_iQueue_Rear, #00H
    MOV s_iQueue_Num,  #00H
    MOV s_iQueue_Data0,#00H
    MOV s_iQueue_Data1,#00H 
    MOV s_iQueue_Data2,#00H
    MOV s_iQueue_Data3,#00H
    MOV s_iQueue_Data4,#00H
    MOV s_iQueue_Data5,#00H
    MOV s_iQueue_Data6,#00H
    MOV s_iQueue_Data7,#00H
    MOV s_iQueue_Data8,#00H
    MOV s_iQueue_Data9,#00H
    RET

;/*********************************************************************************************************
;* 函数名称: EN_QUEUE
;* 函数功能: 将数据存入队列
;* 输入参数: R0-需要储存的数据
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 若队列已满，则自动抛弃队首元素，队尾先储存再自增
;*********************************************************************************************************/
EN_QUEUE:
      ;若队列未满
      MOV  A,s_iQueue_Num
      CJNE A,#QUEUE_SIZE,QUEUE_NOT_FILL ;若队列未满，转至QUEUE_NOT_FILL
      MOV  s_iQueue_Num,#0AH            ;若队列已满
      
      ;队首加一
      INC  s_iQueue_Front               ;抛弃队首元素
      MOV  A,s_iQueue_Front             ;队首的范围为0-QUEUE_SIZE-1
      MOV  B,#QUEUE_SIZE                ;当前队首对QUEUE_SIZE求余，其结果保存至s_iQueue_Front
      DIV  AB                           ;商保存在A中，余数保存在B中
      MOV  s_iQueue_Front,B             ;取余
      LJMP QUEUE_EN_DATA                ;跳转至添加数据

QUEUE_NOT_FILL:
      INC  s_iQueue_Num                 ;队列未满，则队列容量直接加一

QUEUE_EN_DATA:

      ;将数据添加至队尾
      MOV  A,s_iQueue_Rear              ;队尾（偏移量）加载至累加器
      ADD  A,#QUEUE_DATA_START          ;获取当前队尾真实所在地址
      MOV  R1,A                         ;保存队尾地址至R1中
      MOV  A,R0                         ;将需要存入的数据加载至累加器
      MOV  @R1,A                        ;储存数据

      ;队尾加一
      INC s_iQueue_Rear                 ;队尾加一
      MOV A,s_iQueue_Rear               ;队尾范围为0-QUEUE_SIZE
      MOV B,#QUEUE_SIZE                 ;队尾对QUEUE_SIZE求余，其结果保存至s_iQueue_Rear
      DIV AB                            ;商保存在A中，余数保存在B中
      MOV s_iQueue_Rear,B               ;取余
      RET                               ;退出

;/*********************************************************************************************************
;* 函数名称: DE_QUEUE
;* 函数功能: 从队列中读出数据
;* 输入参数: void
;* 输出参数: R0：1-成功，0-失败，R1：读取到的数据
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
DE_QUEUE:
      ;队列为空则直接返回
      MOV A,s_iQueue_Num
      JNZ QUEUE_DE_DATA       ;当前队列容量非零则跳转至QUEUE_DE_DATA取出数据
      MOV R0,#00H             ;获取失败
      RET                     ;直接退出

QUEUE_DE_DATA:                ;开始读出数据
      MOV A,s_iQueue_Front    ;将队首地址加载累加器中
      ADD A,#QUEUE_DATA_START ;获取当前队首所在地址
      MOV R1,A                ;队首所在地址保存至R1中
      MOV A,@R1               ;读取数据，储存至累加器中
      MOV R1,A                ;将读到的数据写入R1中，达到传出去的目的
      DEC s_iQueue_Num        ;当前队列总量减一

      ;队首往后挪
      INC s_iQueue_Front      ;队首加一
      MOV A,s_iQueue_Front    ;队首范围为0-QUEUE_SIZE
      MOV B,#QUEUE_SIZE       ;队首对QUEUE_SIZE求余，其结果保存至s_iQueue_Front
      DIV AB                  ;商保存在A中，余数保存在B中
      MOV s_iQueue_Front,B    ;取余

      MOV R0,#01H             ;返回读取成功
      RET                     ;退出

;/*********************************************************************************************************
;* 函数名称: INIT_DELAY
;* 函数功能: 初始化延时
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 最多延时255ms
;*********************************************************************************************************/
INIT_DELAY:
      MOV s_iDelayTime,#00H
      RET

;/*********************************************************************************************************
;* 函数名称: DELAY_NMS
;* 函数功能: 毫秒延时
;* 输入参数: R0-延时时长
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 最多延时255ms
;*********************************************************************************************************/
DELAY_NMS:
      MOV s_iDelayTime,R0 ;设置延时时间
DELAY_LOOP:
      MOV A,s_iDelayTime  ;s_iDelayTime与零比较
      JNZ DELAY_LOOP      ;等待s_iDelayTime为零，非零则继续循环
      RET                 ;结束

;/*********************************************************************************************************
;* 函数名称: DELAY_TIME_PROC
;* 函数功能: 定时器处理延时函数
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 最多延时255ms
;*********************************************************************************************************/
DELAY_TIME_PROC:
      MOV A,s_iDelayTime  ;s_iDelayTime与0比较
      JZ  DELAY_TIME_RET  ;s_iDelayTime为0则直接退出
      DEC s_iDelayTime    ;否则s_iDelayTime - 1
DELAY_TIME_RET:
      RET                 ;退出

;/*********************************************************************************************************
;* 函数名称: SET_SM_CS
;* 函数功能: 数码管片选
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
SET_SM_CS:
    MOV A,P2     ;获取R2端口信息
    ANL A,#0xF0  ;清除低4位
    ORL A,R0     ;重新配置低4位
    MOV P2,A     ;配置端口
    RET

;/*********************************************************************************************************
;* 函数名称: SM_SHOW_FUC
;* 函数功能: 数码管显示数字函数
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
SM_SHOW_FUC:
  MOV  A,R0
  RL   A
  ADD  A,R0
  MOV  DPTR,#SM_SHOW
  JMP  @A+DPTR
SM_SHOW:
  LJMP SM_SHOW_0
  LJMP SM_SHOW_1
  LJMP SM_SHOW_2
  LJMP SM_SHOW_3
  LJMP SM_SHOW_4
  LJMP SM_SHOW_5
  LJMP SM_SHOW_6
  LJMP SM_SHOW_7
  LJMP SM_SHOW_8
  LJMP SM_SHOW_9
  RET
SM_SHOW_0:
  MOV P0,#SM_CODE0
  RET
SM_SHOW_1:
  MOV P0,#SM_CODE1
  RET
SM_SHOW_2:
  MOV P0,#SM_CODE2
  RET
SM_SHOW_3:
  MOV P0,#SM_CODE3
  RET
SM_SHOW_4:
  MOV P0,#SM_CODE4
  RET
SM_SHOW_5:
  MOV P0,#SM_CODE5
  RET
SM_SHOW_6:
  MOV P0,#SM_CODE6
  RET
SM_SHOW_7:
  MOV P0,#SM_CODE7
  RET
SM_SHOW_8:
  MOV P0,#SM_CODE8
  RET
SM_SHOW_9:
  MOV P0,#SM_CODE9
  RET

;/*********************************************************************************************************
;* 函数名称: SM_SHOW_DATA_FUC
;* 函数功能: 任务3，显示0-255
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
SM_SHOW_DATA_FUC:
  ;显示个位
  MOV   R0,#0x07       ;第四个数码管点亮（最右边）
  LCALL SET_SM_CS      ;拉高数码管CS
  MOV   B,#10          ;除10
  MOV   A,DATA_TO_SHOW ;被除数为DATA_TO_SHOW
  DIV   AB             ;A/B，结果放在A中，余数放在B中
  PUSH  ACC            ;累加器入栈，对累加器进行保护
  MOV   R0,B           ;要显示的数字为B，将B放入R0中作为函数参数
  LCALL SM_SHOW_FUC    ;调用数码管显示数字函数
  LCALL DELAY5MS       ;调用延时函数

  ;显示10位
  MOV   R0,#0x0B       ;第三个数码管点亮
  LCALL SET_SM_CS      ;拉高数码管CS
  MOV   B,#10          ;除10
  POP   ACC            ;从栈区中将累加器数值拿出来
  DIV   AB             ;A/B，结果放在A中，余数放在B中
  PUSH  ACC            ;累加器入栈，对累加器进行保护
  MOV   R0,B           ;要显示的数字为B，将B放入R0中作为函数参数
  LCALL SM_SHOW_FUC    ;调用数码管显示数字函数
  LCALL DELAY5MS       ;调用延时函数

  ;显示百位
  MOV   R0,#0x0D       ;第二个数码管点亮
  LCALL SET_SM_CS      ;拉高数码管CS
  MOV   B,#10          ;除10
  POP   ACC            ;从栈区中将累加器数值拿出来
  DIV   AB             ;A/B，结果放在A中，余数放在B中
  MOV   R0,B           ;要显示的数字为B，将B放入R0中作为函数参数
  LCALL SM_SHOW_FUC    ;调用数码管显示数字函数
  LCALL DELAY5MS       ;调用延时函数

  ;总共延时了15ms，每隔600ms加一，共需40次
  INC    TIME_CNT
  MOV   A,TIME_CNT
  CJNE  A,#40,K1       ;比较TIME_CNT与40，若相等则继续执行，否则跳转至K1出
  ;INC   DATA_TO_SHOW   ;数据加一
  MOV   TIME_CNT,#0    ;重新计数
  RET                  ;退出函数
K1:  
  JC    K3             ;因为CY==1，所以TIME_CNT<40，跳转至K3
  ;INC   DATA_TO_SHOW   ;数据加一
  MOV   TIME_CNT,#0    ;数据超了，重新计数
  RET                  ;退出函数
K3:  
  RET                  ;退出函数

;/*********************************************************************************************************
;* 函数名称: DELAY5MS
;* 函数功能: 5ms延时函数
;* 输入参数: void
;* 输出参数: void
;* 返 回 值: void
;* 创建日期: 2019年08月01日
;* 注    意: 
;*********************************************************************************************************/
DELAY5MS:      ;@11.0592MHz
  NOP
  NOP
  PUSH 30H
  PUSH 31H
  MOV  30H,#44
  MOV  31H,#2
NEXT:
  DJNZ 31H,NEXT
  DJNZ 30H,NEXT
  POP  31H
  POP  30H
  RET

END